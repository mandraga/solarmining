[
    {
        "id": "3cc31816eb23ce6f",
        "type": "tab",
        "label": "Flow ManageHiveosMiners",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a086c925d30ea92b",
        "type": "file in",
        "z": "3cc31816eb23ce6f",
        "name": "Configuration",
        "filename": "path",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 530,
        "y": 80,
        "wires": [
            [
                "2b5192df032c8e30"
            ]
        ]
    },
    {
        "id": "2b5192df032c8e30",
        "type": "json",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 80,
        "wires": [
            [
                "e46066f3b23de7fc"
            ]
        ]
    },
    {
        "id": "ec5870bc2d05f79e",
        "type": "inject",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "517349c837b1ab40",
                "66261e5913def0f8"
            ]
        ]
    },
    {
        "id": "e46066f3b23de7fc",
        "type": "change",
        "z": "3cc31816eb23ce6f",
        "name": "Store Farm access credentials",
        "rules": [
            {
                "t": "set",
                "p": "farm_access",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 80,
        "wires": [
            [
                "13a68712e0a480ea"
            ]
        ]
    },
    {
        "id": "13a68712e0a480ea",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 80,
        "wires": []
    },
    {
        "id": "4d91e156f9e53d5c",
        "type": "http request",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 280,
        "wires": [
            [
                "b2406f0eb383ee5b"
            ]
        ]
    },
    {
        "id": "e773d8597410c7a9",
        "type": "function",
        "z": "3cc31816eb23ce6f",
        "name": "ListMinersToContext",
        "func": "//var somethingchanged = flow.get(\"activeminerchanged\");\n//if (somethingchanged)\n{\n    var config = global.get(\"farm_access\")\n    if (config === undefined) {\n        console.log(\"No Hiveos credentials found\");\n        return null;\n    }\n    msg.headers = {\n        'Content-Type': 'application/json',\n        'Authorization' : 'Bearer ' + config.accessToken\n    }\n    msg.url = config.baseUrl + '/farms/' + config.farmid + '/workers/preview';\n    console.log(msg);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"activeminerchanged\", true);\n\nflow.set(\"pvpower\", 0)\nflow.set(\"acpower\", 0)\nflow.set(\"battcharge\", 0)\n",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "4d91e156f9e53d5c"
            ]
        ]
    },
    {
        "id": "b2406f0eb383ee5b",
        "type": "json",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 790,
        "y": 280,
        "wires": [
            [
                "e41a88f21282094f",
                "0b990dc6e6a565bf"
            ]
        ]
    },
    {
        "id": "0b990dc6e6a565bf",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 320,
        "wires": []
    },
    {
        "id": "bf405d6d2962d040",
        "type": "function",
        "z": "3cc31816eb23ce6f",
        "name": "Throttle mining",
        "func": "var config = global.get(\"farm_access\")\nif (config === undefined) {\n    console.log(\"No Hiveos credentials found\");\n    return null;\n}\nvar available_pv_power = global.get(\"mean_availablepvpower\");\nif (available_pv_power === undefined) {\n    console.log(\"No available PV power found\");\n    return null;\n}\nvar miners_power = global.get(\"miner_power_usage\");\nif (miners_power === undefined) {\n    console.log(\"No miners list found\");\n    return null;\n}\nvar battery_soc = global.get(\"battcharge\");\n// The miners are stopped by the other node\nif (battery_soc < miners_power.min_battery_percent)\n{\n    console.log(\"No battery SOC found\");\n    return null;\n}\n\n/**\n* If the power is available for a miner, then power it\n* For now just enable mining on online machines.\n */\nvar activeminerchanged = false;\nvar workerids = [];\nvar worker_name;\nvar action = \"stop\";\n// 1000 for some kind of histeresis but it depends\n// on your miners.\nvar i = 0;\nvar item = null;\nvar miner_id = 0;\n// If the battery is full, the avaqilable power is saturated and not meaningfull.\n// So do not adjust depending on pv power when the battery is full.\n// If the battery is depleted beyond the threshold, then the miners shall shut down.\nif (battery_soc > miners_power.min_battery_percent)\n{\n    if (battery_soc <= 90)\n    {\n        if (true || available_pv_power > 100)\n        {\n            // Start mining on some miners\n            // TODO: use phases\n            action = \"start\";\n            for (i = 0; i < miners_power.workers.length; i++) {\n                item = miners_power.workers[i];\n                // Do not count idle power because the computer is online\n                if (item.is_online == true && item.is_mining == false &&\n                    item.powermode != \"alwayson\" &&\n                    item.power < available_pv_power)\n                {\n                    workerids.push(item.id);\n                    worker_name = item.name;\n                    activeminerchanged = true;\n                    break; // We will power on the next one in 4 minutes\n                }\n            }\n        }\n        else if (available_pv_power < 0)\n        {\n            // Stop mining on some miners\n            // TODO: use phases\n            // Do not stop mining if the battery has energy\n            /*\n            action = \"stop\";\n            for (i = 0; i < miners_power.workers.length; i++) {\n                item = miners_power.workers[i];\n                // Do not count idle power because the computer is online\n                if (item.is_online == true && item.is_mining == true &&\n                    item.powermode != \"alwayson\")\n                {\n                    workerids.push(item.id);\n                    activeminerchanged = true;\n                    break; // We will power on the next one in 4 minutes\n                }\n            }\n            */\n        }\n    }\n    else\n    {\n        // The battery is full enough\n        // Add one miner at time\n        action = \"start\";\n        for (i = 0; i < miners_power.workers.length; i++) {\n            item = miners_power.workers[i];\n            if (item.is_online == true && item.is_mining == false &&\n                item.powermode != \"alwayson\")\n            {\n                workerids.push(item.id);\n                worker_name = item.name;\n                activeminerchanged = true;\n                break;\n            }\n        }        \n    }\n}\nelse\n{\n    // Depleted battery\n    // Stop mining all miners\n    action = \"stop\";\n    for (i = 0; i < miners_power.workers.length; i++) {\n        item = miners_power.workers[i];\n        if (item.is_online == true && item.is_mining == true &&\n            item.powermode != \"alwayson\")\n        {\n            workerids.push(item.id);\n            worker_name = item.name;\n            activeminerchanged = true;\n        }\n    }\n}\nif (workerids.length)\n{\n    msg.status_txt = \"Mining\" + action + \" on \" + workerids + \" \" + worker_name;\n    flow.set(\"activeminerchanged\", activeminerchanged);\n    const postData = JSON.stringify({ 'worker_ids': workerids, 'data': { 'command': 'miner', 'data': { 'action': action} }});\n    msg.headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + config.accessToken\n    }\n    msg.url = config.baseUrl + '/farms/' + config.farmid + '/workers/command';\n    msg.payload = postData;\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 440,
        "wires": [
            [
                "b2a333e014c6587e",
                "eded654f6aded917",
                "dfccb13f332195fd"
            ]
        ]
    },
    {
        "id": "0b4423b4af78d551",
        "type": "file in",
        "z": "3cc31816eb23ce6f",
        "name": "minerpower",
        "filename": "path",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "6f8939d18000c90b"
            ]
        ]
    },
    {
        "id": "6f8939d18000c90b",
        "type": "json",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 160,
        "wires": [
            [
                "abae808113372e02"
            ]
        ]
    },
    {
        "id": "abae808113372e02",
        "type": "change",
        "z": "3cc31816eb23ce6f",
        "name": "Store miner power usage",
        "rules": [
            {
                "t": "set",
                "p": "miner_power_usage",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 160,
        "wires": [
            [
                "a7c010fef2f77ae8"
            ]
        ]
    },
    {
        "id": "a7c010fef2f77ae8",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "2f824a3b37824685",
        "type": "inject",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "240",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "starstopminers",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "e773d8597410c7a9",
                "69efaa11a2bfeed3",
                "60b8152f23606e4d"
            ]
        ]
    },
    {
        "id": "6e0a03a5ae899cef",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 440,
        "wires": []
    },
    {
        "id": "408616db464ff6a4",
        "type": "comment",
        "z": "3cc31816eb23ce6f",
        "name": "This is executed only at start to read the configuration files.",
        "info": "",
        "x": 250,
        "y": 40,
        "wires": []
    },
    {
        "id": "0bfdea36392e6782",
        "type": "comment",
        "z": "3cc31816eb23ce6f",
        "name": "Running algorithm",
        "info": "",
        "x": 130,
        "y": 240,
        "wires": []
    },
    {
        "id": "eded654f6aded917",
        "type": "http request",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 440,
        "wires": [
            [
                "6e0a03a5ae899cef"
            ]
        ]
    },
    {
        "id": "69efaa11a2bfeed3",
        "type": "delay",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 440,
        "wires": [
            [
                "bf405d6d2962d040"
            ]
        ]
    },
    {
        "id": "9d04c9cc326c0496",
        "type": "function",
        "z": "3cc31816eb23ce6f",
        "name": "Shutdown miners on clock alarm reboot",
        "func": "var config = global.get(\"farm_access\")\nif (config === undefined) {\n    console.log(\"No Hiveos credentials found\");\n    return null;\n}\nvar miners_power = global.get(\"miner_power_usage\");\nif (miners_power === undefined) {\n    console.log(\"No miners list found\");\n    return null;\n}\n// Get current time\nvar epoque = new Date();\n//console.log(epoque);\nvar wake_up_hour = miners_power.solarperiod.start_hour;\nvar sleep_hour   = miners_power.solarperiod.stop_hour;\nvar hour = epoque.getHours();\nvar minutes = epoque.getMinutes();\nvar battery_soc = global.get(\"battcharge\");\nvar workerids = [];\nvar seconds_to_wakeup = 120;\nvar idle_minutes = 20;\nmsg.status_txt = \"Did nothing\";\n// Daytime or enough battery capacity\nif (battery_soc < miners_power.min_battery_percent)\n{\n    if (hour >= wake_up_hour && hour < sleep_hour)\n    {\n        // If depleted battery, then sleep waiting for some solar power because\n        // it's day.\n        // Power off the extra non mining miners for an while\n        seconds_to_wakeup = 60 * idle_minutes;\n        // Build the list of all the active miners\n        for (let i = 0; i < miners_power.workers.length; i++)\n        {\n            if (miners_power.workers[i].is_online &&\n                miners_power.workers[i].powermode != \"alwayson\")\n            {\n                workerids.push(miners_power.workers[i].id);\n            }\n        }\n        msg.status_txt = \"Day routine \" + workerids;\n    }\n    else\n    {\n        // It's night and no more battery\n        // It is night and battery is low; then\n        // power off miners and wake them up next morning\n        if (hour >= sleep_hour)\n        {\n            seconds_to_wakeup += (23 - hour) * 60 * 60;\n            seconds_to_wakeup += wake_up_hour * 60 * 60;\n            seconds_to_wakeup += (60 - minutes) * 60;\n        }\n        else if (hour < wake_up_hour)\n        {\n            seconds_to_wakeup += (wake_up_hour - hour) * 60 * 60;\n            seconds_to_wakeup += (60 - minutes) * 60;\n        }\n        // Build the list of all the active miners\n        for (let i = 0; i < miners_power.workers.length; i++)\n        {\n            if (miners_power.workers[i].is_online &&\n                miners_power.workers[i].powermode != \"alwayson\")\n            {\n                workerids.push(miners_power.workers[i].id);\n            }\n        }\n        msg.status_txt = \"t's night with not enough charge, shutdown everything\" + workerids;\n    }\n    msg.status_txt += msg.payload = \"\" + hour + \"h \" + minutes  + \"minutes and \" + seconds_to_wakeup + \"seconds to wakeup\";\n    if (workerids.length > 0)\n    {\n        msg.status_txt = \"Stopped \" + workerids + \" for \" + seconds_to_wakeup / 60 + \" minutes.\";\n        command = \"sreboot wakealarm \" + seconds_to_wakeup;\n        // Request to shut them down and wake up at wake_up_hour\n        const postData = JSON.stringify({ 'worker_ids': workerids, 'data': { 'command': 'exec', 'data': { 'cmd': command } }});\n        msg.headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + config.accessToken\n        }\n        msg.url = config.baseUrl + '/farms/' + config.farmid + '/workers/command';\n        msg.payload = postData;\n        flow.set(\"activeminerchanged\", true);\n        return msg;\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 500,
        "wires": [
            [
                "f2b4396d395d98da",
                "cae01d9bd56317c9"
            ]
        ]
    },
    {
        "id": "eb89580d7bb00065",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 500,
        "wires": []
    },
    {
        "id": "9aef1cac4d5e5eac",
        "type": "http request",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1230,
        "y": 500,
        "wires": [
            [
                "eb89580d7bb00065"
            ]
        ]
    },
    {
        "id": "60b8152f23606e4d",
        "type": "delay",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "pauseType": "delay",
        "timeout": "120",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 430,
        "y": 500,
        "wires": [
            [
                "9d04c9cc326c0496"
            ]
        ]
    },
    {
        "id": "c38cf4bc84261733",
        "type": "http request",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1530,
        "y": 280,
        "wires": [
            [
                "f7b8b4b12723b051"
            ]
        ]
    },
    {
        "id": "e41a88f21282094f",
        "type": "function",
        "z": "3cc31816eb23ce6f",
        "name": "getOnlineMinersInfo",
        "func": "var somethingchanged = flow.get(\"activeminerchanged\");\nvar msg_arr = [];\n\n//if (somethingchanged)\n{\n    var config = global.get(\"farm_access\")\n    if (config === undefined) {\n        console.log(\"No Hiveos credentials found\");\n        return null;\n    }\n    var miners_power = global.get(\"miner_power_usage\");\n    if (miners_power === undefined) {\n        console.log(\"No miners list found\");\n        return null;\n    }\n    // Get the recently updated online miners list\n    var miners_array = msg.payload;\n    if (miners_array === undefined) {\n        console.log(\"No miners list found\");\n        return null;\n    }\n    // Request more info per miner\n    msg.debug = \"\";\n    for (var i = 0; i < miners_array.data.length; i++)\n    {\n        var miner_id = miners_array.data[i].id;\n        var minercfg = miners_power.workers.find(o => o.id === miner_id);\n        msg.debug += \" + \" + miner_id;\n        // Do not gather information about \"always on\" miners.\n        if (minercfg.powermode != \"alwayson\")\n        {\n            if (miners_array.data[i].stats.online == true)\n            {\n                minercfg.is_online = true;\n                const request = new Object();\n                request.headers = {\n                    'Content-Type': 'application/json',\n                    'Authorization' : 'Bearer ' + config.accessToken\n                }\n                request.url = config.baseUrl + '/farms/' + config.farmid + '/workers/' + miner_id;\n                msg_arr.push(request);\n            }\n            else\n            {\n                minercfg.is_online = false;\n                minercfg.is_mining = false;\n            }\n        }\n    }\n    // Update\n    global.set(\"miner_power_usage\", miners_power);\n    // Store the request list\n    msg.payload = msg_arr;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"activeminerchanged\", true);",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 280,
        "wires": [
            [
                "2ab41b212fcac8a6",
                "27e7a476d2b726a1"
            ]
        ]
    },
    {
        "id": "f7b8b4b12723b051",
        "type": "json",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1670,
        "y": 280,
        "wires": [
            [
                "464eca3eec49a17c"
            ]
        ]
    },
    {
        "id": "940d3967475a1fd4",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 280,
        "wires": []
    },
    {
        "id": "2ab41b212fcac8a6",
        "type": "split",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1170,
        "y": 280,
        "wires": [
            [
                "a5d1e6eab9c53013"
            ]
        ]
    },
    {
        "id": "464eca3eec49a17c",
        "type": "function",
        "z": "3cc31816eb23ce6f",
        "name": "Update miner info",
        "func": "// Updates the miner power measurement\nvar miners_power = global.get(\"miner_power_usage\");\nif (miners_power === undefined) {\n    console.log(\"No miners list found\");\n    return null;\n}\nvar workerdata = msg.payload;\nvar worker_id = workerdata.id;\nvar power_usage = 0;\nif (workerdata.octofan_stats == undefined)\n{\n    // No octominer, use the sum of the GPU powers + 40\n    power_usage = 0;\n    for(var key in Object.values(workerdata.gpu_stats))\n    {\n        power_usage += workerdata.gpu_stats[key].power;\n    }\n}\nelse\n{\n    power_usage = workerdata.octofan_stats.psu.power_ac;\n    if (power_usage === undefined) {\n        console.log(\"No power_usage field found!\");\n        return null;\n    }\n}\nvar is_mining = \"miner_start_time\" in workerdata.stats;\nif (is_mining === undefined) {\n    console.log(\"No is_mining field found!\");\n    return null;\n}\nvar item = miners_power.workers.find(o => o.id === worker_id);\nif (item === undefined) {\n    console.log(\"No miners power data found!\");\n    return null;\n}\nif (item.power < power_usage)\n{\n    item.power = power_usage;\n}\nif (item.iddle_power > power_usage &&\n    power_usage > 25)\n{\n    item.iddle_power = power_usage;\n}\nitem.is_online = true;\nitem.is_mining = is_mining;\n// Update\nglobal.set(\"miner_power_usage\", miners_power);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 280,
        "wires": [
            [
                "940d3967475a1fd4"
            ]
        ]
    },
    {
        "id": "517349c837b1ab40",
        "type": "function",
        "z": "3cc31816eb23ce6f",
        "name": "Access Rights",
        "func": "var cfgpath = global.get(\"cfg_files_path\");\ncfgpath = cfgpath + \"access.json\"\nmsg.payload = cfgpath;\nmsg.path = cfgpath;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 80,
        "wires": [
            [
                "a086c925d30ea92b"
            ]
        ]
    },
    {
        "id": "66261e5913def0f8",
        "type": "function",
        "z": "3cc31816eb23ce6f",
        "name": "Miners File Name",
        "func": "var cfgpath = global.get(\"cfg_files_path\");\ncfgpath = cfgpath + \"minerpower.json\"\nmsg.payload = cfgpath;\nmsg.path = cfgpath;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [
            [
                "0b4423b4af78d551"
            ]
        ]
    },
    {
        "id": "27e7a476d2b726a1",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "debug",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 320,
        "wires": []
    },
    {
        "id": "a5d1e6eab9c53013",
        "type": "function",
        "z": "3cc31816eb23ce6f",
        "name": "compose request",
        "func": "msg.headers = msg.payload.headers;\nmsg.url = msg.payload.url;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"activeminerchanged\", true);",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 280,
        "wires": [
            [
                "c38cf4bc84261733"
            ]
        ]
    },
    {
        "id": "b2a333e014c6587e",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "34710a9eb1039e6d",
        "type": "inject",
        "z": "3cc31816eb23ce6f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 600,
        "wires": [
            [
                "9d04c9cc326c0496"
            ]
        ]
    },
    {
        "id": "dfccb13f332195fd",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "start/stop status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "status_txt",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 360,
        "wires": []
    },
    {
        "id": "f2b4396d395d98da",
        "type": "debug",
        "z": "3cc31816eb23ce6f",
        "name": "shutdown status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "status_txt",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 560,
        "wires": []
    },
    {
        "id": "cae01d9bd56317c9",
        "type": "switch",
        "z": "3cc31816eb23ce6f",
        "name": "Prune debug messages",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 500,
        "wires": [
            [
                "9aef1cac4d5e5eac"
            ]
        ]
    }
]
